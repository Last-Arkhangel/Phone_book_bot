#!/usr/bin/env python
# -*- coding: utf-8 -*-
import users
import settings
import telebot, xlrd, openpyxl, datetime
from openpyxl import load_workbook
from settings import KEYBOARD
import flask
from flask_sslify import SSLify

WEBHOOK_URL_BASE = "https://{}:{}".format(settings.WEBHOOK_HOST, settings.WEBHOOK_PORT)

bot = telebot.TeleBot(settings.BOT_TOKEN, threaded=True)

# —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
bot.remove_webhook()

# —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ = –°–ª—ã—à—å, –µ—Å–ª–∏ –∫—Ç–æ –º–Ω–µ –Ω–∞–ø–∏—à–µ—Ç, —Å—Ç—É–∫–Ω–∏ —Å—é–¥–∞ ‚Äî url
bot.set_webhook(url=WEBHOOK_URL_BASE + settings.WEBHOOK_PATH)

app = flask.Flask(__name__)
sslify = SSLify(app)

with open('users.py', 'r') as fp:
    user_ids = [int(l) for l in fp.readlines()]

@bot.message_handler(func=lambda message: message.chat.id not in user_ids)
def access_msg(message):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KEYBOARD['START'])
    name = message.chat.first_name + ' ' + (message.chat.last_name or '')
    dtn = datetime.datetime.now()
    botlogfile = open('bot_td_logs.txt', 'a', encoding='utf-8')
    print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "–î–æ—Å—Ç—É–ø Bot üö´ ({}, @{}, id:{}) -> {}".format(name, message.chat.username, message.from_user.id, message.text), file=botlogfile)
    botlogfile.close()
    msg = "<b>–î–û–°–¢–£–ü –ó–ê–ë–û–†–û–ù–ï–ù–û –¢–Ü–õ–¨–ö–ò –î–õ–Ø –í–ò–ö–õ–ê–î–ê–ß–Ü–í </b>\n\n"
    
    bot.send_message(message.chat.id, text=msg, parse_mode='HTML', reply_markup=kb)

@bot.message_handler(commands=['start'])
def start_handler(message):
    name = message.chat.first_name + ' ' + (message.chat.last_name or '')    
    msg = "–í—ñ—Ç–∞—é, {} üòä. \n" \
          "–¶–µ –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –¥–æ–≤—ñ–¥–Ω–∏–∫ , –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞ {} —Ä.\n\n".format(name, settings.VERSION)
    kb = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, text=msg, parse_mode='HTML', reply_markup=kb)

@bot.message_handler(commands=['help'])
def get_text_messages(message):
    msg = "–©–æ–± –∑–¥—ñ–π—Å–Ω–∏—Ç –ø–æ—à—É–∫ –≤–µ–¥—ñ—Ç—å <b>–ø—Ä—ñ–∑–≤–∏—â–µ</b> –∞–±–æ <b>—ñ–º'—è</b> –∞–±–æ <b>–º—ñ—Å—è—Ü—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è</b>, –ø–æ–≤–Ω—ñ—Å—Ç—é –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä—ñ —Ç–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ. \n"
    
    bot.send_message(message.from_user.id, text=msg, parse_mode='HTML')

@bot.message_handler(commands=['log'])
def text(message):
    if message.chat.id == settings.ADMINS_ID:
        file = open('bot_td_logs.txt', 'rb')
        bot.send_document(message.chat.id, file)
    else:
        bot.send_message(message.chat.id, settings.NO_ADMIN)

client_status = {}
def save(data):
    with open('users.py', 'a') as id_file:
        id_file.write(data)

@bot.message_handler(commands=['add_user'])
def add_user(message):
    if message.chat.id == settings.ADMINS_ID:
        client_id = message.from_user.id
        client_status[client_id] = 'wait_for_data'
        bot.send_message(chat_id=client_id, text='–í–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ')
    else:
        bot.send_message(message.chat.id, settings.NO_ADMIN)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.chat.id == settings.ADMINS_ID:
        client_id = message.from_user.id
        if client_id in client_status and client_status[client_id] == 'wait_for_data':
            save(message.text + '\n') # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            bot.send_message(chat_id=client_id, text="–í–∏ –¥–æ–¥–∞–ª–∏ USER ID: {}!".format(message.text))
            del client_status[client_id]
    else:
        dtn = datetime.datetime.now()
        botlogfile = open('bot_td_logs.txt', 'a', encoding='utf-8')
        print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "–ü–æ—à—É–∫ ({}, id:{}) -> {}".format(message.chat.first_name + ' ' + (message.chat.last_name or ''), message.from_user.id, message.text), file=botlogfile)
        botlogfile.close()
    
        rb = xlrd.open_workbook(r'–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –¥–æ–≤—ñ–¥–Ω–∏–∫.xlsx')
        sheet = rb.sheet_by_index(0)
        rows = [sheet.row_values(rownum) for rownum in range(1, sheet.nrows)]
        orders = [item for item in rows if item[3] == message.text] + [item for item in rows if item[4] == message.text] + [item for item in rows if item[8] == message.text] + [item for item in rows if item[9] == message.text] + [item for item in rows if item[10] == message.text] + [item for item in rows if item[13] == message.text]

        if len(orders) == 0:
            bot.send_message(message.from_user.id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º  <b>{}</b>  ‚õîÔ∏è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ".format(message.text), parse_mode='HTML')
        else:
            for order in orders:
                
                bot.send_message(message.from_user.id, "<i>üë§ <u>–ü–Ü–ë</u></i>:  <b>{} {} {}</b>\n" \
                                                       "<i>üìÖ <u>–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è</u></i>:  <b>{}</b>\n" \
                                                       "<i>üìë <u>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</u></i>:  <b>{}</b>\n" \
                                                       "<i>üñã <u>–ü–æ—Å–∞–¥–∞</u></i>:  <b>{}</b>\n" \
                                                       "<i>üö™ <u>–ö–∞–±—ñ–Ω–µ—Ç</u></i>:  <b>{}</b>\n" \
                                                       "<i>üìû <u>–¢–µ–ª. –≤–Ω—É—Ç—Ä.</u></i>:  {}\n" \
                                                       "<i>‚òéÔ∏è <u>–¢–µ–ª. –º—ñ—Å—Ü–µ–≤.</u></i>:  {}\n" \
                                                       "<i>üì± <u>–¢–µ–ª. –º–æ–±. 1</u></i>:  {}\n" \
                                                       "<i>üì± <u>–¢–µ–ª. –º–æ–±. 2</u></i>:  {}\n" \
                                                       "<i>üìù <u>–ü—Ä–∏–π–Ω—è—Ç—Ç—è</u></i>:  <b>{}</b>\n" \
                                                       "<i>üõë <u>–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è</u></i>:  <b>{}</b>\n".format(order[3], order[4], order[5], order[6], order[0], order[2], order[1], order[7], order[8], order[9], order[10], order[11], order[12]), parse_mode='HTML')



# –ø—É—Å—Ç–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/', methods=['GET', 'HEAD'])
def index():
    return 'ok'

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –≤–µ–±—Ö—É–∫–∞ = —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫ –Ω–∞–º –ø–æ—Å—Ç—É—á–∞–ª—Å—è —Ç–µ–ª–µ–≥—Ä–∞–º 
@app.route(settings.WEBHOOK_PATH, methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)

# Start polling server
#bot.polling(interval=settings.POLLING_INTERVAL, timeout=settings.POLLING_TIMEOUT, none_stop=True)

# Start flask server
app.run(host=settings.WEBHOOK_LISTEN,
        port=settings.WEBHOOK_PORT,
        ssl_context=(settings.WEBHOOK_SSL_CERT, settings.WEBHOOK_SSL_PRIV),
        debug=settings.WEBHOOK_DEBUG)